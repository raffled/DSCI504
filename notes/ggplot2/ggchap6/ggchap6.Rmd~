---
title: 'ggChap6: Scales, axes and legends'
author: "jharner"
date: "March 3, 2015"
output: html_document
---

## 6.1 Introduction

Scales control the mapping from data to aesthetics. They take your data and
turn it into something that you can perceive visually: e.g., size, colour, position
or shape. Scales also provide the tools you use to read the plot: the axes and
legends (collectively known as guides).

Formally, each scale is a function from a region in data space (the domain of the scale) to a region in aesthetic space (the range of the range). The domain of each scale corresponds to the range of the variable supplied to the scale, and can be continuous or discrete, ordered or unordered. The range consists of the concrete aesthetics that you can perceive and that R can understand: position, colour, shape, size and line type.

The process of scaling takes place in three steps:

* transformation,   
* training,  
* mapping.  

Without a scale, there is no way to go from the data to aesthetics, so a scale is required for every aesthetic used on the plot. It would be tedious to manually add a scale every time you used a new aesthetic, so whenever a scale is needed `ggplot2` will add a default.

Scales can be roughly divided into four categories:

* position scales,  
* colour scales,  
* the manual discrete scale,  
* the identity scale.  

The other important role of each scale is to produce a *guide* that allows the viewer to perform the inverse mapping, from aesthetic space to data space, and read values off the plot. For position aesthetics:

* the axes are the guides; for all other aesthetics,  
* legends do the job.  

All aspects of the guides are controlled by parameters of the scale. 

## 6.2 How scales work

Since an input variable is either discrete or continuous, the *domain* is either:

* a set of values (stored as a factor, character vector or logical vector), or  
* an interval on the real line (stored as a numeric vector of length 2).  

For example, in the mammals sleep dataset (`msleep`), the domain of the discrete variable `vore` is `{carni, herbi, omni}`, and the domain of the continuous variable `bodywt` is `[0.005, 6654]`.

The *range* can also be discrete or continuous.

* For discrete scales, it is a vector of aesthetic values corresponding to the input values.  
* For continuous scales, it is a 1d path through some more complicated space.  

> For example, a colour gradient interpolates linearly from one colour to another. The range is either specified by the user when the scale is created, or by the scale itself.

The process of mapping the domain to the range includes the following
stages:

* *transformation*: (for continuous domain only). It is often useful to display a transformation of the data, such as a logarithm or square root.

> After any transformations have been applied, the statistical summaries for each layer are computed based on the transformed data. This ensures that a plot of log(x) vs. log(y) on linear scales looks the same as x vs. y on log scales.

* *training*: During this key stage, the domain of the scale is learned.

> In a plot with only one layer, representing only raw data, it consists of determining the minimum and maximum values of a continuous variable (after transformation), or listing the unique levels of a categorical variable. However, often the domain must reflect multiple layers across multiple datasets in multiple panels. The domain can also be specified directly, overriding the training process, by manually setting the domain of the scale with the `limits` argument. Any values outside of the domain of the scale will be mapped to `NA`.

* *mapping*: The last thing to do is to apply the scaling function that maps data values to aesthetic values.

We haven’t discussed the role faceting plays in training, and we have also ignored position adjustments.

## 6.3 Usage

Every aesthetic has a default scale that is added to the plot whenever you use that aesthetic.

The scale depends on the variable type: continuous (numeric) or discrete (factor, logical, character). If you want to change the default scales see `set_default_scale()`.

Default scales are added when you initialise the plot and when you add
new layers. This means it is possible to get a mismatch between the variable
type and the scale type if you later modify the underlying data or aesthetic
mappings. When this happens you need to add the correct scale yourself. The
following example illustrates the problem and solution.
```{r}
library(ggplot2)
plot <- qplot(cty, hwy, data = mpg)
plot
# This doesn’t work because there is a mismatch between the
# variable type and the default scale
plot + aes(x = drv)
# Correcting the default manually resolves the problem.
plot + aes(x = drv) + scale_x_discrete()
```

To add a different scale or to modify some features of the default scale, you must construct a new scale and then add it to the plot using `+`. All scale constructors have a common naming scheme. They start with `scale_`, followed by the name of the aesthetic (e.g., `colour_`, `shape_` or `x_`), and finally by the name of the scale (e.g., `gradient`, `hue` or `manual`). For example, the name of the default scale for the `colour` aesthetic based on discrete data is `scale_colour_hue()`, and the name of the `Brewer colour` scale for fill colour is `scale_fill_brewer()`.

We start with a plot that uses the default colour scale, and then modify it to adjust the appearance of the legend, and then use a different colour scale.
```{r}
p <- qplot(sleep_total, sleep_cycle, data = msleep, colour = vore)
p
# Explicitly add the default scale
p + scale_colour_hue()
# Adjust parameters of the default, here changing the appearance
# of the legend
p + scale_colour_hue("What does\n it eat?",
   breaks = c("herbi", "carni", "omni", NA),
   labels = c("plants", "meat", "both", "don’t know"))
# Use a different scale
# p + scale_colour_brewer(pal = "Set1")
```

## 6.4 Scale details

Scales can be divided roughly into four separate groups:  

* *Position scales*, used to map continuous, discrete and date-time variables onto the plotting region and to construct the corresponding axes.   
* *Colour scales*, used to map continuous and discrete variables to colours.  
* *Manual scales*, used to map discrete variables to your choice of symbol size,
line type, shape or colour, and to create the corresponding legend.
* *identity scales*, used to plot variable values directly to the aesthetic rather than mapping them.

### 6.4.1 Common arguments

The following arguments are common to all scales.  

* `name`: sets the label which will appear on the axis or legend.

> You can supply text strings (using \n for line breaks) or mathematical expressions (as described by `?plotmath`). Because tweaking these labels is such a common task, there are three helper functions to save you some typing: `xlab()`, `ylab()` and `labs()`.
```{r}
p <- qplot(cty, hwy, data = mpg, colour = displ)
p
p + scale_x_continuous("City mpg")
p + xlab("City mpg")
p + ylab("Highway mpg")
p + labs(x = "City mpg", y = "Highway", colour = "Displacement")
p + xlab(expression(frac(miles, gallon)))
```

* `limits`: fixes the domain of the scale.

> Continuous scales take a numeric vector of length two; discrete scales take a character vector. If limits are set, no training of the data will be performed.  `Limits` are useful for removing data you don’t want displayed in a plot and for ensuring that limits are consistent across multiple plots intended to be compared. Any value not in the domain of the scale is discarded, which occurs before statistics are calculated.

* `breaks and labels`: `breaks` controls which values appear on the `axis` or `legend`, i.e., what values tick marks should appear on an axis or how a continuous scale is segmented in a legend. `labels` specifies the labels that should appear at the breakpoints. If `labels` is set, you must also specify `breaks`, so that the two can be matched up correctly.

> `Break`s affect what appears on the `axes` and `legends`, while `limits` affect what appears on the plot.
```{r}
p <- qplot(cyl, wt, data = mtcars)
p
p + scale_x_continuous(breaks = c(5.5, 6.5))
p + scale_x_continuous(limits = c(5.5, 6.5))

p <- qplot(wt, cyl, data = mtcars, colour = cyl)
p
p + scale_colour_gradient(breaks = c(5.5, 6.5))
p + scale_colour_gradient(limits = c(5.5, 6.5))
```
   
The plot column uses the default settings for both breaks and limits, which are `limits = c(4, 8)` and `breaks = 4:8`. In the next plot, the `breaks` have been reset: the plotted region is the same, but the `tick` positions and `labels` have shifted. In the third plot, it is the `limits` which have been redefined, so much of the data now falls outside the plotting region. A similar strategy is used for `colour`.

* `formatter`: if no labels are specified the formatter will be called on each break to produce the label.

> Useful formatters for continuous scales are `comma`, `percent`, `dollar` and `scientific`, and for discrete scales is `abbreviate`.

### 6.4.2 Position scales

Every plot must have two position scales, one for the horizontal position (the
x scale) and one for the vertical position (the y scale). `ggplot2` comes with `continuous`, `discrete` (for factor, character and logical vectors) and `date` scales. Each of these transform the data in a slightly different way, and generate a slightly different type of axis.

`ggplot2` provides a couple of helper functions to change the axis limits: `xlim()` and `ylim()`. These functions inspect their input and then create the appropriate scale, as follows:

* `xlim(10, 20)`: a continuous scale from 10 to 20;   
* `ylim(20, 10)`: a reversed continuous scale from 20 to 10;  
* `xlim("a", "b", "c")`: a discrete scale;  
* `xlim(as.Date(c("2008-05-01", "2008-08-01")))`: a date scale from May 1 to August 1 2008.

In `ggplot2`, any data outside the limits is not plotted and not included in the statistical transformation. This means that setting the limits is not the same as visually zooming in to a region of the plot. To do that, you need to use the `xlim` and `ylim` arguments to `coord_cartesian()`.

The limits of position scales extend a little past the range of the data. This ensures that the data does not overlap the axes. You can control the amount of expansion with the `expand` argument.

#### Continuous

The most common continuous position scales are `scale_x_continuous` and `scale_y_continuous`, which map data to the x and y axis. The most interesting variations are produced using transformations. Every continuous scale takes a `trans` argument, allowing the specification of a variety of transformations, both linear and non-linear. 

Transformations are most often used to modify position scales, so there are shortcuts for `x`, `y` and `z` scales: `scale_x_log10()` is equivalent to `scale_x_continuous(trans = "log10")`. The `trans` argument works for any continuous scale, including the `colour` gradients, but the short-cuts only exist for position scales.

You can also perform the transformation yourself. For example, instead of using `scale_x_log()`, you could plot `log10(x)`. That produces an identical result inside the plotting region, but the the axis and tick labels won’t be the same. If you use a transformed scale, the axes will be labelled in the original data space. In both cases, the transformation occurs before the statistical summary.
```{r}
qplot(log10(carat), log10(price), data = diamonds)
qplot(carat, price, data = diamonds) +
  scale_x_log10() + scale_y_log10()
```

Transformers are also used in `coord_trans()`, where the transformation occurs after the statistic has been calculated, and affects the shape of the graphical object drawn on the plot.

#### Date and time

Dates and times are basically continuous values, but with special ways of labelling the axes. Currently, only dates of class date and times of class `POSIXct` are supported. If your dates are in a different format you will need to convert them with `as.Date()` or `as.POSIXct()`.

There are three arguments that control the appearance and location of the ticks for date axes: `major`, `minor` and `format`.

* The `major` and `minor` arguments specify the position of major and minor breaks in terms of date units, years, months, weeks, days, hours, minutes and seconds, and can be combined with a multiplier.

> For example, major = "2 weeks" will place a major tick mark every two weeks. If not specified, the date scale has some reasonable default for choosing them automatically.

* The `format` argument specifies how the tick labels should be formatted.

> Table 6.3 lists the special characters used to display components of a date. For example, if you wanted to display dates of the form 14/10/1979, you would use the string "%d/%m/%y".

```{r}
plot <- qplot(date, psavert, data = economics, geom = "line") +
  ylab("Personal savings rate") +
  geom_hline(xintercept = 0, colour = "grey50")
plot
# plot + scale_x_date(major = "10 years")
# plot + scale_x_date(
#  limits = as.Date(c("2004-01-01", "2005-01-01")),
#  format = "%Y-%m-%d"
#)
```

#### Discrete

Discrete position scales map the unique values of their input to integers. The
order of the result can be controlled by the `breaks` argument, and `levels` can be dropped with the `limits` argument (or by using `xlim()` or `ylim()`). Because it is often useful to place labels and other annotations on intermediate positions on the plot, discrete position scales also accept continuous values. If you have not adjusted the `breaks` or `limits`, the numerical position of a factor level can be calculated with `as.numeric()`: the values are placed on integers starting at 1.

### 6.4.3 Colour

After `position`, probably the most commonly used aesthetic is `colour`. There are quite a few different ways of mapping values to colours: three different gradient based methods for continuous values, and two methods for mapping discrete values.

We’ll use a modern attempt to construct a colour space that is perceptually uniform called the `hcl` colour space, which has three components of hue, chroma and luminance:

* Hue is a number between 0 and 360 (an angle) which gives the “colour” of the colour: like blue, red, orange, etc.  
* Luminance is the lightness of the colour. A luminance of 0 produces black, and a luminance of 1 produces white.  
* Chroma is the purity of a colour. A chroma of 0 is grey, and the maximum value of chroma varies with luminance.  

See Figure 6.6.

#### Continuous

There are three types of continuous colour gradients, based on the number of
colours in the gradient:

* `scale_colour_gradient()` and `scale_fill_gradient()`: a two-colour gradient, low-high. Arguments `low` and `high` control the colours at either end of the gradient.
* `scale_colour_gradient2()` and `scale_fill_gradient2()`: a three-colour gradient, `low-med-high`. 

> The midpoint defaults to 0, but can be set to any value with the midpoint argument. This is particularly useful for creating diverging colour schemes.

* `scale_colour_gradientn()` and `scale_fill_gradientn()`: a custom n-colour gradient.

> This scale requires a vector of colours in the colours argument. Without further arguments these colours will be evenly spaced along the range of the data. If you want the values to be unequally spaced, use the `values` argument, which should be between 0 and 1 if rescale is true (the default), or within the range of the data is rescale is false.

Colour gradients are often used to show the height of a 2d surface. In the following example we’ll use the surface of a 2d density estimate of the faithful dataset, which records the waiting time between eruptions and during each eruption for the Old Faithful geyser in Yellowstone Park.
```{r}
f2d <- with(faithful, MASS::kde2d(eruptions, waiting, h = c(1, 10), n = 50))
df <- with(f2d, cbind(expand.grid(x, y), as.vector(z)))
names(df) <- c("eruptions", "waiting", "density")
erupt <- ggplot(df, aes(waiting, eruptions, fill = density)) +
  geom_tile() +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0))
erupt + scale_fill_gradient(limits = c(0, 0.04))
erupt + scale_fill_gradient(limits = c(0, 0.04),
  low = "white", high = "black")
erupt + scale_fill_gradient2(limits = c(-0.04, 0.04),
  midpoint = mean(df$density))
```

#### Discrete

There are two colour scales for discrete data, one which chooses colours in an
automated way, and another which makes it easy to select from hand-picked
sets.

The default colour scheme, `scale_colour_hue()`, picks evenly spaced hues around the hcl colour wheel. This works well for up to about eight colours, but after that it becomes hard to tell the different colours apart. 

### 6.4.4 The manual discrete scale

The discrete scales, `scale_linetype()`, `scale_shape()` and `scale_size_discrete` basically have no options (although for the shape scale you can choose whether points should be filled or solid). These scales are just a list of
valid values that are mapped to each factor level in turn.

If you want to customise these scales, you need to create your own new scale
with the manual scale: `scale_shape_manual()`, `scale_linetype_manual()`, `scale_colour_manual()`, etc. The manual scale has one important argument, `values`, where you specify the values that the scale should produce.

### 6.4.5 The identity scale

The `identity` scale is used when your data is already in a form that the plotting
functions in R understand, i.e., when the data and aesthetic spaces are the same. This means there is no way to derive a meaningful `legend` from the data alone, and by default a legend is not drawn. If you want one, you can still use the `breaks` and `labels` arguments to set it up yourself.

## 6.5 Legends and axes

Collectively, axes and legends are called *guides*, and they are the inverse of the scale: they allow you to read observations from the plot and map them back to their original values.

In `ggplot2`, legends and axes are produced automatically based on the scales and geoms that you used in the plot.

The contents of the legend and axes are controlled by the scale, and the
details of the rendering are controlled by the theming system. The following
list includes the most commonly tweaked settings.

* The scale `name` controls the axis label and the legend title. This can be a string, or a mathematical expression, as described in `?plotmath`.    
* The `breaks` and `labels` arguments to the scale function are particularly important because they control what tick marks appear on the axis and what keys appear on the legend.  
* The `theme` settings `axis.*` and `legend.*` control the visual appearance of axes and legends.  
* The internal `grid` lines are controlled by the breaks and minor breaks
arguments. By default minor grid lines are spaced evenly in the original
data space: this gives the common behaviour of log-log plots where major
grid lines are multiplicative and minor grid lines are additive.  
* The `position` and `justification` of legends are controlled by the `theme` setting `legend.position`, and the value can be right, left, top, bottom, none (no legend), or a numeric position. The numeric position gives (in values between 0 and 1) the position of the corner given by legend.justification, a numeric vector of length two. Top right = c(1, 1), bottom left = c(0, 0).


